This is an assignment made for STORD the logistics services & software company.


## Requirements
There are a few things that are assumed to exist in your settup or are otherwise encouraged to have.

* A postgresql service running in the background
* asdf to install dependencies (optional)


In case of a missing postgres installation one can be easily spawned through docker using the following command.

```
docker run -d \
    --name postgres \
    -p 5432:5432 \
    -e POSTGRES_PASSWORD=postgres \
    -e PGDATA=/var/lib/postgresql/data/pgdata \
    postgres
```

Note that the postgres password is set to 'postgres', the app will try to connect to the user `postgres` with password `postgres`. This is hardcoded at the moment and can be changed in the elixir `dev.exs` config.

For asdf there is a guide on their webpage. If you already have elixir and node installed in your system you can skip this part.

Web tutorial: https://asdf-vm.com/#/core-manage-asdf


## Settup
To settup the application locally, the following commands should be run.

> `make pre-setup` -> (Optional) Will install elixir, erlang and node through asdf

> `make setup` -> Will setup the elixir application.

> `make run-test` -> Will run tests

> `make run-lint` -> Will lint for types and code quality as well as run the formatter

> `make server` -> Will run the server, visit http://localhost:8080 to view it


## Other notes and info

So the application meets the requirements overall, what could be included is end to end testing and tests regarding the frontend.

The application is quite minimalistic, the requirements are simple and I did not want to overcomplicate them.

Why I used a hash algorith for the short url (which ends up not being that short) is because I wanted a 1 to 1 connection between the urls and the slug, however changes could be made to support other types of slugs.

Why I took the decision to use phoneix websockets for the url connection is because I wanted to refresh my memory on them and it felt like it could be a good fit for them here.
